let schema={sensorID:[],sensorName:[],eventSize:[],parseFormat:[],axisNames:[],scalingFactor:[]},header=[],body=[],test=0,sensorTime=[],timeID=[],sensorID=[],sensorValue=[];const start_uint8=240,csvmaker=function(e,t,s){csvRows=[];let r=Object.keys(t);csvRows.push(r),e.forEach(e=>{let t=r.map(t=>{let s=e[t];return String(s)});csvRows.push(t)});let a=document.querySelector(".content");a.textContent+=".csv file created. Creating download.";let n=new Blob([csvRows.join("\n")],{type:"text/csv"}),o=window.URL.createObjectURL(n),l=document.createElement("a");l.setAttribute("href",o),l.setAttribute("download",s),l.click(),URL.revokeObjectURL(o)};function previewFile(){let e=document.querySelector(".content"),[t]=document.querySelector("input[type=file]").files,s=new FileReader;e.textContent+="The Button has been clicked\n",s.addEventListener("load",()=>{let t=s.result.split(/\r\n|\n/);for(var r=0;r<t.length-1;r++)/^(1.0|1.1)/.test(t[r])?"1.0"==t[r]?test+=t[r].length:"1.1"==t[r]&&(test+=t[r].length):/^\d:/.test(t[r])||/^\d\d:/.test(t[r])?(header.push(t[r]),test+=t[r].length):body.push(t[r]);e.textContent+="Getting the schema...\n",header.forEach(e=>{let t=e.split(":");schema.sensorID.push(t[0]),schema.sensorName.push(String(t[1]).trim()),schema.eventSize.push(parseInt(String(t[2]).trim())),schema.parseFormat.push(String(dataTypeEquivalent(String(t[3]).trim())).split(",").at(0)),schema.axisNames.push(String(t[4]).trim().toUpperCase()),schema.scalingFactor.push(t[5])}),e.textContent+="Schema Updated. Reading the file in full...\n",console.log(schema),readAsBuffer()},!1),t&&s.readAsText(t)}function readAsBuffer(){let e=document.querySelector(".content"),[t]=document.querySelector("input[type=file]").files,s=new FileReader;s.addEventListener("load",()=>{let t=s.result,r=new Uint8Array(t),a=r.subarray(test),n=a.indexOf(240),o=a.subarray(n);o.length,e.textContent+="Creating array from the file buffer \n";let l=Array.from(o);console.log(l),parseFile(l)},!1),t&&s.readAsArrayBuffer(t)}function parseFile(e){let t=e.includes(240),s=document.querySelector(".content");for(s.textContent+="File divided according to identifier. Converting data according to format...\n";e.length>0&&!0==t;)if(240==e[0])timeID.push(e.splice(0,1)),sensorTime.push(e.splice(0,8));else{sensorID.push(e.shift());let r=schema.sensorID.indexOf(String(sensorID.at(-1))),a=schema.eventSize[parseInt(r)],n=schema.parseFormat[String(r)],o=[];o=e.splice(0,a),dataFormatting(n,o)}for(;e.length>0&&!1==t;){sensorID.push(e.shift());let l=schema.sensorID.indexOf(String(sensorID.at(-1))),c=schema.eventSize[parseInt(l)],i=schema.parseFormat[String(l)],u=schema.scalingFactor[String(l)];console.log("scaling Factor : "+u);let f=[];f=e.splice(0,c),dataFormatting(i,f,parseFloat(u))}console.log(sensorID),console.log(sensorValue),convertToParquet(sensorID,sensorValue),s.textContent+="File formatted. Converting to CSV...\n"}async function convertToParquet(e,t){let s={};schema.sensorName.forEach(e=>{String(schema.axisNames.at(schema.sensorName.indexOf(e))).split(",").forEach(t=>{s[e+"-"+t]=String(schema.parseFormat.at(schema.sensorName.indexOf(e)))})});let r=[],a=t.length;console.log(a);let n=Object.entries(s).length;console.log(n);for(let o=0;o<a;o+=n){let l=o,c={};for(let i in s)c[i]=t[l],l++;r.push(c)}console.log(s);let u=document.querySelector(".content");u.textContent+="Creating csv file...",console.log(r),csvmaker(r,s,"download.csv")}function dataFormatting(e,t,s){if("INT_8"==e){let r=new Uint8Array(t),a=new Int8Array(r.buffer);a.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...a]}else if("INT_16"==e){let n=new Uint8Array(t),o=new Int16Array(n.buffer);o.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...o]}else if("UINT_8"==e){let l=new Uint8Array(t);l.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...l]}else if("UINT_16"==e){let c=new Uint8Array(t),i=new Uint16Array(c.buffer);i.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...i]}else if("INT_32"==e){let u=new Uint8Array(t),f=new Int32Array(u.buffer);f.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...f]}else if("UINT_32"==e){let h=new Uint8Array(t),m=new Uint32Array(h.buffer);m.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...m]}else if("INT_64"==e){let p=new Uint8Array(t),d=new BigInt64Array(p.buffer);d.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...d]}else if("UINT_64"==e){let g=new Uint8Array(t),b=new BigUint64Array(g.buffer);b.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...b]}else if("FLOAT"==e){let I=new Uint8Array(t),T=new Float32Array(I.buffer);T.forEach(e=>{e*=s}),sensorValue=[...sensorValue,...T]}else window.onerror=function(e,t,s){return alert("Error message: "+e+"\nURL: "+t+"\nLine Number: "+s),!0}}function dataTypeEquivalent(e){let t=[];return e.split(",").forEach(e=>{switch(e){case"s8":t.push("INT_8");break;case"u8":t.push("UINT_8");break;case"s16":t.push("INT_16");break;case"u16":t.push("UINT_16");break;case"s32":t.push("INT_32");break;case"u32":t.push("UINT_32");break;case"s64":t.push("INT_64");break;case"u64":t.push("UINT_64");break;case"f":case"d":t.push("FLOAT");break;case"s":t.push("UTF8");break;default:console.log("Error : This is not a accepted Parse Format")}}),e="",e=t.join(",")}